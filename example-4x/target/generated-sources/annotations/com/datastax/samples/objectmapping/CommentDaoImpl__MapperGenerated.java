package com.datastax.samples.objectmapping;

import com.datastax.oss.driver.api.core.PagingIterable;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
public class CommentDaoImpl__MapperGenerated extends DaoBase implements CommentDao {
  private static final Logger LOG = LoggerFactory.getLogger(CommentDaoImpl__MapperGenerated.class);

  private final CommentByUserHelper__MapperGenerated commentByUserHelper;

  private final CommentByVideoHelper__MapperGenerated commentByVideoHelper;

  private final PreparedStatement retrieveUserCommentsStatement;

  private final PreparedStatement retrieveVideoCommentsStatement;

  private final CommentDaoQueryProvider upsertInvoker;

  private final CommentDaoQueryProvider deleteInvoker;

  private CommentDaoImpl__MapperGenerated(MapperContext context,
      CommentByUserHelper__MapperGenerated commentByUserHelper,
      CommentByVideoHelper__MapperGenerated commentByVideoHelper,
      PreparedStatement retrieveUserCommentsStatement,
      PreparedStatement retrieveVideoCommentsStatement, CommentDaoQueryProvider upsertInvoker,
      CommentDaoQueryProvider deleteInvoker) {
    super(context);
    this.commentByUserHelper = commentByUserHelper;
    this.commentByVideoHelper = commentByVideoHelper;
    this.retrieveUserCommentsStatement = retrieveUserCommentsStatement;
    this.retrieveVideoCommentsStatement = retrieveVideoCommentsStatement;
    this.upsertInvoker = upsertInvoker;
    this.deleteInvoker = deleteInvoker;
  }

  @Override
  public PagingIterable<CommentByUser> retrieveUserComments(UUID userid) {
    BoundStatementBuilder boundStatementBuilder = retrieveUserCommentsStatement.boundStatementBuilder();
    NullSavingStrategy nullSavingStrategy = NullSavingStrategy.DO_NOT_SET;

    if (userid != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      boundStatementBuilder = boundStatementBuilder.set("userid", userid, UUID.class);
    }

    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, commentByUserHelper);
  }

  @Override
  public PagingIterable<CommentByVideo> retrieveVideoComments(UUID videoid) {
    BoundStatementBuilder boundStatementBuilder = retrieveVideoCommentsStatement.boundStatementBuilder();
    NullSavingStrategy nullSavingStrategy = NullSavingStrategy.DO_NOT_SET;

    if (videoid != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      boundStatementBuilder = boundStatementBuilder.set("videoid", videoid, UUID.class);
    }

    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, commentByVideoHelper);
  }

  @Override
  public void upsert(Comment comment) {
    upsertInvoker.upsert(comment);
  }

  @Override
  public void delete(Comment res) {
    deleteInvoker.delete(res);
  }

  public static CompletableFuture<CommentDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      CommentByUserHelper__MapperGenerated commentByUserHelper = new CommentByUserHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        commentByUserHelper.validateEntityFields();
      }
      CommentByVideoHelper__MapperGenerated commentByVideoHelper = new CommentByVideoHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        commentByVideoHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `public abstract PagingIterable<com.datastax.samples.objectmapping.CommentByUser> retrieveUserComments(java.util.UUID) `:
      SimpleStatement retrieveUserCommentsStatement_simple = replaceKeyspaceAndTablePlaceholders("SELECT * FROM ${keyspaceId}.${tableId} WHERE userid = :userid ", context, commentByUserHelper);
      LOG.debug("[{}] Preparing query `{}` for method public abstract PagingIterable<com.datastax.samples.objectmapping.CommentByUser> retrieveUserComments(java.util.UUID) ",
          context.getSession().getName(),
          retrieveUserCommentsStatement_simple.getQuery());
      CompletionStage<PreparedStatement> retrieveUserCommentsStatement = prepare(retrieveUserCommentsStatement_simple, context);
      prepareStages.add(retrieveUserCommentsStatement);
      // Prepare the statement for `public abstract PagingIterable<com.datastax.samples.objectmapping.CommentByVideo> retrieveVideoComments(java.util.UUID) `:
      SimpleStatement retrieveVideoCommentsStatement_simple = replaceKeyspaceAndTablePlaceholders("SELECT * FROM ${keyspaceId}.${tableId} WHERE videoid = :videoid ", context, commentByVideoHelper);
      LOG.debug("[{}] Preparing query `{}` for method public abstract PagingIterable<com.datastax.samples.objectmapping.CommentByVideo> retrieveVideoComments(java.util.UUID) ",
          context.getSession().getName(),
          retrieveVideoCommentsStatement_simple.getQuery());
      CompletionStage<PreparedStatement> retrieveVideoCommentsStatement = prepare(retrieveVideoCommentsStatement_simple, context);
      prepareStages.add(retrieveVideoCommentsStatement);
      // Initialize all method invokers
      CommentDaoQueryProvider upsertInvoker = new CommentDaoQueryProvider(context, commentByUserHelper, commentByVideoHelper);
      CommentDaoQueryProvider deleteInvoker = new CommentDaoQueryProvider(context, commentByUserHelper, commentByVideoHelper);
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (CommentDao) new CommentDaoImpl__MapperGenerated(context,
              commentByUserHelper,
              commentByVideoHelper,
              CompletableFutures.getCompleted(retrieveUserCommentsStatement),
              CompletableFutures.getCompleted(retrieveVideoCommentsStatement),
              upsertInvoker,
              deleteInvoker))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static CommentDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
